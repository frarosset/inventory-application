<%- include("checkboxInputList.ejs") _%>
<div id="passwordCheckboxListDiv">
  <%_ 
    const prevProtectedSelected = locals.prevProtectedSelectedValues ?? [];
    const isEdit = locals.edit ?? false;

    const inputParams = {type: "password", name: "passwordCheckboxList", label: "Password", maxlength: process.env.PWD_MAX_LENGTH};
  _%>
  <p><strong>Some protected items have been <span class="edit-type">selected</span>.</strong> Admin password is required to apply changes to them.</p>
  <%- include("input.ejs",inputParams) _%>
</div>
<script>
  (() => {
    const protectedValuesSet = new Set(<%- JSON.stringify(protectedValues) _%>);
    const checkboxInputs = Array.from(document.querySelectorAll('input[name="<%= name %>"]'));
    const passwordCheckboxListDiv = document.querySelector("#passwordCheckboxListDiv");
    const passwordCheckboxList = passwordCheckboxListDiv.querySelector('input[type="password"]');

    <%_ if (isEdit) { _%>

    const editTypeSpan = document.querySelector("span.edit-type");
    const prevProtectedSelected = <%- JSON.stringify(prevProtectedSelected)_%>;
    const prevProtectedSelectedSet = new Set(prevProtectedSelected);

    function hasProtectedSelectedEdited() {
      const protectedSelectedInput = checkboxInputs.filter(input => input.checked && protectedValuesSet.has(input.value));
      const protectedSelected = protectedSelectedInput.map(input => input.value);
      const protectedSelectedSet = new Set(protectedSelected);

      const wereUnselected = prevProtectedSelected.filter(x => !protectedSelectedSet.has(x));
      const wereSelected = protectedSelected.filter(x => !prevProtectedSelectedSet.has(x));

      const anyWereUnselected = wereUnselected.length > 0;
      const anyWereSelected = wereSelected.length > 0;

      return {
        askPassword: anyWereUnselected || anyWereSelected,
        anyWereUnselected,
        anyWereSelected,
        wereUnselected,
        wereSelected
      };
    }

    <%_ } else { _%>

    function hasProtectedSelected() {
      const selected = checkboxInputs.filter(input => input.checked);
      return selected.some(input => protectedValuesSet.has(input.value));
    }

    <%_ } _%>

    const setPasswordCheckboxListConstraints = () => {
      <%_ if (isEdit) { _%>

      const {
        askPassword,
        anyWereUnselected,
        anyWereSelected,
        wereUnselected,
        wereSelected
      } = hasProtectedSelectedEdited();

      <%_ } else { _%>
      const askPassword = hasProtectedSelected();
      <%_ } _%>

      if (askPassword) {
        passwordCheckboxList.required = true;
        passwordCheckboxList.disabled = false;
        // passwordCheckboxListDiv.style.visibility = "visible";
        passwordCheckboxListDiv.style.display = "block";

        <%_ if (isEdit) { _%>

        const editTypeStr = anyWereUnselected ? (anyWereSelected ? "edited" : "unselected") : (anyWereSelected ? "selected" : null);
        editTypeSpan.textContent = `${editTypeStr} (${[...wereSelected, ...wereUnselected].join(", ")})`;

        <%_ } _%>

      } else {
        passwordCheckboxList.required = false;
        passwordCheckboxList.disabled = true;
        // passwordCheckboxListDiv.style.visibility = "hidden";
        passwordCheckboxListDiv.style.display = "none";
      }
    }

    checkboxInputs.forEach(input => {
      input.onchange = setPasswordCheckboxListConstraints;

      // add protected symbol to help the user identifying protected items
      if (protectedValuesSet.has(input.value))
        input.nextElementSibling.insertAdjacentHTML("beforeend", "<%- include('isProtectedSymbol.ejs', {is_protected: true}) %>");
    });

    window.addEventListener('pageshow', setPasswordCheckboxListConstraints);
  })();
</script>